<?php
/**
 * Created by PhpStorm.
 * User: jnapoleone
 * Date: 12/5/2013
 * Time: 4:59 PM
 */

// Load the bullhorn_job_board_apply.inc to reuse query functions
module_load_include('inc','bullhorn_job_board_apply');

/**
 * Implementation of hook_menu()
 */
function bullhorn_job_board_apply_menu() {
    $items = array();

    $items['job-board/%/apply'] = array(
        'title'            => '',
        'page callback'    => 'bullhorn_job_board_apply_action',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

    return $items;
}

/**
 * Bullhorn Job Board Apply Action
 *
 * @param $job_order_id
 */

function bullhorn_job_board_apply_action( $job_order_id ) {

    // Get the global language variable
    global $language;

    $return_path = 'job-board';

    if($language->language == 'fr') {
        $return_path = 'carriï¿½res';
    }

    // If a session for a candidate is not set redirect them to the candidates login page
    if(!isset($_SESSION['bullhorn']['candidate']) || empty($_SESSION['bullhorn']['candidate'])) {
        drupal_goto('candidates',array('query' => drupal_get_destination()));
    }

    // Sanitize our Job Order ID
    if(empty($job_order_id) || !is_numeric($job_order_id)) {
        drupal_set_message(t('For technical reasons we could not process your request. Please try again later.'),'error');
        watchdog( 'bullhorn job board apply',"Job Order application failed, Job Order ID (:job_order_id) was empty or not numeric. Function :function.", array(':job_order_id' => $job_order_id,':function' => __FUNCTION__),WATCHDOG_ERROR);
        drupal_goto($return_path);
    }


    // Set some candidate variables
    $cuid       = $_SESSION['bullhorn']['candidate']['cuid']; // Bullhorn CandidateID
    $cid        = $_SESSION['bullhorn']['candidate']['cid'];  // Tundra candidate ID
    $first_name = $_SESSION['bullhorn']['candidate']['first_name'];
    $last_name  = $_SESSION['bullhorn']['candidate']['last_name'];
    $email      = $_SESSION['bullhorn']['candidate']['email'];

    // Sanitize our Bullhorn Candidate User ID
    if(empty($cuid) || !is_numeric($cuid)) {
        drupal_set_message(t('For technical reasons we could not process your request. Please try again later.'),'error');
        watchdog( 'bullhorn job board apply',"Job Order application failed, Candidate Bullhorn User ID was empty or not numeric. Function :function.", array(':function' => __FUNCTION__),WATCHDOG_ERROR);
        drupal_goto($return_path);
    }

    // Sanitize our Candidate ID
    if(empty($cid) || !is_numeric($cid)) {
        drupal_set_message(t('For technical reasons we could not process your request. Please try again later.'),'error');
        watchdog( 'bullhorn job board apply',"Job Order application failed, Candidate ID was empty or not numeric. Function :function.", array(':function' => __FUNCTION__),WATCHDOG_ERROR);
        drupal_goto($return_path);
    }

    // Report these variables if they are empty
    if(empty($first_name)) {
        watchdog( 'bullhorn job board apply',"Candidate's first name was empty during the Job Application process. Function :function.", array(':function' => __FUNCTION__),WATCHDOG_ERROR);
    }
    if(empty($last_name)) {
        watchdog( 'bullhorn job board apply',"Candidate's last name was empty during the Job Application process. Function :function.", array(':function' => __FUNCTION__),WATCHDOG_ERROR);
    }

    // Log in to Bullhorn REST API

    $session_obj = bullhorn_rest_api_login();

    //
    // Get the title and the status of the JobOrder being applied for by $job_order_id
    //

    //Build a REST query request
    $uri = 'query/JobOrder?fields=title,status,isPublic&where=id=' . $job_order_id . '&count=1&BhRestToken=' . $session_obj->BhRestToken;
    $url = $session_obj->restUrl . $uri;

    // Do the rest request
    $get_result = bullhorn_rest_api_get_request( $url );

    // If the REST request result is empty the fail gracefully and log it as an error
    if( empty( $get_result ) ) {
        drupal_set_message( t( 'For technical reasons we could not process your request. Please try again later.' ), 'error' );
        watchdog( 'bullhorn job board apply', "Job Order application failed, Candidate ID was empty or not numeric. Function :function.", array( ':function' => __FUNCTION__ ), WATCHDOG_ERROR );
        drupal_goto( $return_path );
    }

    $title     = $get_result->data[0]->title;
    $status    = $get_result->data[0]->status;
    $is_public = $get_result->data[0]->isPublic;

    // TODO If the status is not 'Accepting Candidates' what should I do?
    // TODO If the isPublic is false then what should I do?

    // If the Candidate has already applied for the position let's
    // redirect them back to the Job Board with a friendly message
    if(isset($_SESSION['bullhorn']['candidate']['applied']) && in_array($job_order_id,$_SESSION['bullhorn']['candidate']['applied'])) {
        drupal_set_message(t('Thank you for applying for the position of :title.',array(':title' => $title)),'status');
        drupal_goto($return_path);
    }

    //
    // Apply for the JobOrder
    //

    // Build a REST request
    $uri = 'entity/JobSubmission?BhRestToken=' . $session_obj->BhRestToken;
    $url = $session_obj->restUrl . $uri;

    // Set the necessary JobSubmission values
    $job_submission_data = array(
        'candidate' => array(
                'id'        => $cuid,
                'firstName' => $first_name,
                'lastName'  => $last_name
            ),
        'isDeleted' => false,
        'jobOrder'  => array(
                'id' => intval($job_order_id),
            ),
        'status'    => 'New Lead',
    );

    // PUT request the $job_submission data to the $url
    $result = bullhorn_rest_api_json_put_request( $url, $job_submission_data );

    // If the $result of the JobSubmission is empty the print a message to the screen,
    // log the issue and return to the Job Board
    if( empty( $result ) || isset( $result->errorMessage )){
        drupal_set_message( t( 'For technical reasons we could not process your request. Please try again later.' ), 'error' );
        watchdog( 'bullhorn job board apply', 'Job Submission failed for %first_name %last_name.', array( '%first_name' => $first_name, '%last_name' => $last_name ), WATCHDOG_ERROR );
        drupal_goto( $return_path );
    }

    // Scrub the return data to ensure as best possible that the JobSubmission was PUT correctly
    // if either of the returned returned values are what is relatively expected then log the issue

    // If $changeEntityId is empty or not a numeric value log it for debug
    if( !isset($result->changedEntityId) || empty( $result->changedEntityId ) || !is_numeric( $result->changedEntityId) ) {
        watchdog( 'bullhorn job board apply', 'An issue involving the changedEntityId occurred for a JobSubmission.', array(), WATCHDOG_DEBUG );
    }

    // If $changeType is empty or not the value: INSERT - log it for debug
    if( !isset( $result->changeType ) || empty( $result->changeType ) || strtolower($result->changeType) != 'insert' ) {
        watchdog( 'bullhorn job board apply', 'An issue involving the changeType occurred for a JobSubmission.', array(), WATCHDOG_DEBUG );
    }

    // Get or create the JobOrder id and title in the database

    $jid = bullhorn_job_order_apply_process_job_order_id( $job_order_id, $title );

    // Create a database association between the Candidate and applied for JobOrder
    if( !$jid ) {
        watchdog( 'bullhorn job board apply', 'The JobOrder ID for %job_order_id does not exist or could not be created', array( '%job_order_id' => $job_order_id ), WATCHDOG_DEBUG );
    } else {
        $jsid = $result->changedEntityId;
        $mess = array( 'first_name' => $first_name, 'last_name' => $last_name, 'title' => $title );
        $aid = bullhorn_job_order_apply_candidate_job_order_id_save( $jid, $cid, $jsid, $job_order_id, $mess );
    }

    // Send an confirmation email to tche Candidate and an alert to Tundra of the Job application
    $values = array('first_name' => $first_name,'last_name' => $last_name,'email' => $email,'job_title' => $title);
    bullhorn_job_board_apply_candidate_mail_send( $values );

    // Note: Originally this email was being sent to Julian
    // Schwaiger. When working to fix the issue with Job
    // Orders not being deleted or updated it was noticed
    // that Julian was removed and replaced with Jeff Sacco.
    // Ed Tornberg was notified about this and was asked if
    // Julian should be put back as recipient of of these
    // emails to which he did not respond.
    bullhorn_job_board_apply_employee_mail_send( $values );

    drupal_set_message( t( 'Thank you for applying for the position of :title.', array( ':title' => $title ) ), 'status' );
    drupal_goto( $return_path );

}

/**
 * Implementation of hook_node_view($node,$view_mode,$langcode)
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function bullhorn_job_board_apply_node_view($node,$view_mode,$langcode) {
    if($node->type === 'job_order' && $view_mode === 'full') {
//        $breadcrumb = array();
//        $breadcrumb[] = l(t('Home'),'<front>');
//        $breadcrumb[] = l(t('Job Board'),'job-board');
////        $breadcrumb[] = l(drupal_get_title(),  base_path().request_uri());
//        drupal_set_breadcrumb($breadcrumb);
        $applied = false;
        $job_order_id = $node->field_job_order_id['und'][0]['value'];
        if(isset($_SESSION['bullhorn']['candidate']['applied']) && !empty($_SESSION['bullhorn']['candidate']['applied'])) {
            $applied = in_array($job_order_id,$_SESSION['bullhorn']['candidate']['applied']);
        }

        if(!$applied) {
            $node->content['field_application_link'] = array(
                '#theme'   => 'link',
                '#text'    => t('Apply'),
                '#path'    => 'job-board/' . $job_order_id . '/apply',
                '#weight'  => -10,
                '#options' => array(
                    'attributes' => array(
                        'class' => 'apply-link',
                    ),
                    'html'       => FALSE
                )
            );
        } else {
            $node->content['field_application_link'] = array(
                '#theme'       => 'field',
                '#title'       => 'Appication',
                '#access'      => TRUE,
                '#view_mode'   => 'full',
                '#language'    => 'und',
                '#field_name'    => 'field_application_link',
                '#field_type'    => 'text',
                '#bundle'        => 'job_order',
                '#entity_type'   => 'node',
                '#items'         => array(
                    array(
                        'value' => t('Applied'),
                        'format' => NULL,
                        'save_value' => 'Applied'
                    )
                ),
                '#options'       => array(
                    'attributes' => array(
                        'class' => 'applied-text',
                    ),
                    'html'       => FALSE,
                ),
                '#formatter'     => 'text_default',
                '#label_display' => 'hidden',
                array(
                    '#markup' => 'Applied',
                ),
                '#weight'        => -10
            );
        }
    }
}