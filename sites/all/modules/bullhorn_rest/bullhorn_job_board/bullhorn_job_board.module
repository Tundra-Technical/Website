<?php
// Load include file
module_load_include('inc','bullhorn_job_board');

/**
 * Implementation of hook_menu()
 * @return mixed
 */

function bullhorn_job_board_menu() {

    $items = array();

    $items['admin/config/content/bullhorn/bullhorn_get_subscribed_events'] = array(
        'title'            => 'Get Subscribed Events (Runs in Cron)',
        'description'      => 'Get subscribed events from Bullhorn.',
        'page callback'    => 'bullhorn_job_board_subscribed_events',
        'access arguments' => array('access administration pages'),
        'weight'           => 2,
        'type'             => MENU_NORMAL_ITEM,
    );

    $items['admin/config/content/bullhorn/bullhorn_event_subscribe'] = array(
        'title'            => 'Subscribe to events',
        'description'      => 'Subscribe to Bullhorn Events INSERTED, UPDATED and DELETED',
        'page callback'    => 'bullhorn_job_board_event_subscription',
        'access arguments' => array('access administration pages'),
        'weight'           => 3,
        'type'             => MENU_NORMAL_ITEM,
    );

    $items['admin/config/content/bullhorn/bullhorn_get_jobs'] = array(
        'title'            => 'Get all Jobs (Deprecated)',
        'description'      => 'Get Jobs from Bullhorn',
        'page callback'    => 'bullhorn_job_board_get_jobs',
        'access arguments' => array('access administration pages'),
        'weight'           => 4,
        'type'             => MENU_NORMAL_ITEM,
    );

    return $items;
}

function bullhorn_job_board_query($BhRestToken, $BhURL)
{
    $raw_result = db_query("SELECT max(field_job_order_id_value) as val FROM field_data_field_job_order_id");

    $item = $raw_result->fetchObject();

    //$data = "query/JobOrder?fields=id,address,dateAdded,employmentType,skillList,publicDescription,title,dateEnd,categories&where=id>".$item->val."&orderBy=+id&BhRestToken=".$BhRestToken;
    //$data = "query/JobOrder?fields=title,id,address,dateAdded,employmentType,skillList,dateEnd,dateEnd,categories,status,publishedZip,isPublic&where=id".$item->val."%20AND%20isPublic=1&orderBy=-id&count=20&BhRestToken=".$BhRestToken;
//    $data = "query/JobOrder?fields=title,id,address,dateAdded,employmentType,skillList,dateEnd,categories,status,publishedZip,isPublic,publicDescription&where=id>" . $item->val . "%20AND%20isPublic=1&orderBy=-id&count=20&BhRestToken=" . $BhRestToken;

    $data = "query/JobOrder?fields=title,id,address,dateAdded,employmentType,skillList,dateEnd,categories,status,publishedZip,isPublic,publicDescription,payRate&where=isPublic=1&orderBy=-id&count=20&BhRestToken=" . $BhRestToken;


    $tuCurl = curl_init();
    curl_setopt($tuCurl, CURLOPT_URL, $BhURL . $data);
    curl_setopt($tuCurl, CURLOPT_PORT, 443);
    curl_setopt($tuCurl, CURLOPT_VERBOSE, 0);
    curl_setopt($tuCurl, CURLOPT_HEADER, 0);
    curl_setopt($tuCurl, CURLOPT_SSLVERSION, 3);
    curl_setopt($tuCurl, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($tuCurl, CURLOPT_RETURNTRANSFER, 1);
    $tuData = curl_exec($tuCurl);
    curl_close($tuCurl);

    return $tuData;
}

/*
function bullhorn_rest_queue_cron_info()
{

	$queues['bullhorn_api'] = array(
    'worker callback' => 'bullhorn_cron_process',
    'time' => 60,
  );
  return $queues;
}
*/

function bullhorn_job_board_event_subscription () {

    $subscription_id = variable_get('bullhorn_rest_api_subscription_id');
//    $subscription_id = 'Abcde';

    $session_obj = bullhorn_rest_api_login();

    $uri = 'event/subscription/' . $subscription_id . '?type=entity&names=JobOrder&eventTypes=INSERTED,UPDATED,DELETED';
    $url = $session_obj->restUrl . $uri;

    $query = http_build_query(
        array(
            'BhRestToken' => $session_obj->BhRestToken,
        )
    );

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_PORT, 443);
    curl_setopt($ch, CURLOPT_VERBOSE, 0);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_SSLVERSION, 3);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('BhRestToken:' . $session_obj->BhRestToken)); //After much searching and trial and error this was the key
    $result = curl_exec($ch);

    if($result === false) {
        $ch_errno = curl_errno($ch);
        $ch_error = curl_error($ch);
        watchdog( 'bullhorn_job_board', 'cURL request failed. Error No.: ( %errno ), Error: ( %error )', array( '%errno' => $ch_errno, '%error' => $ch_error ), WATCHDOG_DEBUG );
    }

    curl_close($ch);

    $response = json_decode($result);

}

/**
 * Bullhorn Do Subscribed Events
 */

function bullhorn_job_board_subscribed_events() {

    // Log in to the Bullhorn REST API

    $session_obj = bullhorn_rest_api_login();

    // Get the subscribed events from Bullhorn

    $response = _bullhorn_job_board_get_subscribed_events($session_obj);

    if( empty($response) ) {
        watchdog( 'bullhorn_job_board', 'Ran subscribed events and result was empty.', array(), WATCHDOG_INFO );
        exit;
    }

    // Set the current requestId for this event
    // TODO use request_id to get data returned from this request after its been done already
    // i.e. to recover from a failure to perform this request the first time
    $request_id = $response->requestId;
    variable_set('bullhorn_event_request_id',$request_id); // Let's save it in the variables table for now

    // Set the events Array
    $events = $response->events;

    // Set an Array of test events
//    $events_array = array(
//            'requestId' => 1,
//            'events'    => array(
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'updatedProperties' => array('phone'),
//                    'entityEventType' => 'UPDATED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10871
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'entityEventType' => 'INSERTED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10870
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'entityEventType' => 'INSERTED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10869
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'entityEventType' => 'INSERTED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10871
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'entityEventType' => 'DELETED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10895
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'updatedProperties' => array('address'),
//                    'entityEventType' => 'UPDATED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10857
//                ),
//                (object) array(
//                    'eventId' => 'ID:JBM-40004219',
//                    'eventType' => 'ENTITY',
//                    'entityName' => 'JobOrder',
//                    'eventMetadata' => (object) array(),
//                    'updatedProperties' => array('payRate','address'),
//                    'entityEventType' => 'UPDATED',
//                    'eventTimestamp'  => 1234567890,
//                    'entityId' => 10856
//                )
//            )
//    );
//
//    $events = $events_array['events'];


    // Get INSERTED events
    $inserted = _bullhorn_job_board_get_events_by_event_type( $events, 'inserted' );

    // If $inserted Array is not empty then process INSERTED Events
    $insert_result = bullhorn_job_board_insert( $inserted, $session_obj );

    // Get UPDATED events
    $updated = _bullhorn_job_board_get_events_by_event_type( $events, 'updated' );

    // If $update Array is not empty then process UPDATED Events
    $update_result = bullhorn_job_board_update( $updated, $session_obj );

    // Get DELETED events
    $deleted = _bullhorn_job_board_get_events_by_event_type( $events, 'deleted' );

    // If $delete Array is not empty then process DELETED Events
    $delete_result = bullhorn_job_board_delete( $deleted, $session_obj );

    return '';
}

/**
 * Bullhorn Job Board Insert
 *
 * @param $inserted
 * @param $session
 */

function bullhorn_job_board_insert( $inserted, $session ) {

    // Set the entityIds
    // Create a comma separated list of entityIds (JobOrderIds) for use in IN parameter query
    $entity_ids = '';
    foreach( $inserted as $insert ) {
        // If the $insert->entityId is set, not empty and does not already exist as a
        // field_job_order_id attached to a node in the system then add it to the list
        if( isset( $insert->entityId ) && !empty( $insert->entityId ) && ( !$entity = _bullhorn_job_board_find_node_by_job_order_id( $insert->entityId ) ) ) {
//        if( isset( $insert->entityId ) && !empty( $insert->entityId ) ) {
            $entity_ids .= $insert->entityId . ',';
        }
    }

    // If $entity_ids is empty then end the execution
    if( empty( $entity_ids ) ) {
        watchdog( 'bullhorn_job_board', 'Found INSERTED event and either there was/were no entityId(s) or there was/were node(s) with matching job_order_id(s)', array(), WATCHDOG_NOTICE );
        return false;
    }

    // Trim the last comma
    $entity_ids = trim($entity_ids,',');

    // Build a REST URI path to retrieve data for the inserted JobOrder
    $bh_rest_token = $session->BhRestToken;
    $fields = _bullhorn_job_board_job_order_fields_clause();
    $uri = 'query/JobOrder?fields=' . $fields . '&where=id%20IN%20(' . $entity_ids . ')%20AND%20isPublic=1&BhRestToken=' . $bh_rest_token;
    $url = $session->restUrl . $uri;

    // Do the REST request
    $response = bullhorn_rest_api_get_request( $url );

    // If $response is empty then end execution
    if( empty( $response ) || !$response->count ) {
        watchdog( 'bullhorn_job_board', 'Found INSERTED event and the REST request returned no data.', array(), WATCHDOG_DEBUG );
        return false;
    }

    // Get the data array
    $data = $response->data;

//    // If $data is empty then end execution
//    if( empty( $data ) ) {
//        return false;
//    }

    // Loop through the $data set(s) and create job_order nodes
    foreach( $data as $insert_data ) {
        $insert_node = bullhorn_job_board_job_order_insert( $insert_data );
        try {
            node_save($insert_node);
            watchdog( 'bullhorn_job_board', 'Found INSERTED event and inserted node title: (%title).', array( '%title' => $insert_node->title ), WATCHDOG_INFO );
            $success = TRUE;
        } catch (Exception $e) {
            watchdog( 'bullhorn job board', 'Found INSERTED event and failed to save node. Error: ( %exception ), File: ( %file ), Function: ( %function ).', array( '%exception' => $e, '%file' => __FILE__, '%function' => __FUNCTION__ ), WATCHDOG_CRITICAL);
        }
    }

    return '';
}

/**
 * Bullhorn Job Board Update
 *
 * @param $updated
 * @param $session
 * @return bool
 */

function bullhorn_job_board_update( $updated, $session ) {

    // Set an Array to store all update data
    $updates = array();

    $entity_job_order_fields = _bullhorn_job_board_entity_job_order_fields_association();

    // Add the supported fields and the node entity information for the give updatedEntity
    foreach( $updated as $update) {
        foreach( $update->updatedProperties as $updated_property) {
            if( array_key_exists( $updated_property, $entity_job_order_fields ) ) {
                $query = new EntityFieldQuery();
                $query->entityCondition( 'entity_type', 'node' )
                    ->entityCondition( 'bundle', 'job_order' )
                    ->fieldCondition( 'field_job_order_id', 'value', $update->entityId );
                $entity = $query->execute();
                if( empty( $entity ) ) {
                    continue;
                }
                $updates[$update->entityId]['updated_properties'][] = $updated_property;
                $updates[$update->entityId]['node'] = $entity['node'];
            }
        }
    }

    // If none of the updatedProperties are on the list of $entity_job_order_fields then end execution
    if( empty( $updates ) ) {
        watchdog( 'bullhorn_job_board', 'Found UPDATED event and no applicable job_order fields were found.', array(), WATCHDOG_NOTICE );
        return false;
    }

    $entity_ids = array_keys( $updates );

    // Set an comma separated list of the entityId(s) for use in REST request
    $entity_ids_str = implode( $entity_ids, ',' );
    $entity_ids_str = trim ( $entity_ids_str, ',' );

    // Build a REST request path to retrieve data for the updated JobOrder(s)
    $bh_rest_token = $session->BhRestToken;
    $fields = _bullhorn_job_board_job_order_fields_clause();
    $uri = 'query/JobOrder?fields='. $fields .'&where=id%20IN%20(' . $entity_ids_str . ')%20AND%20isPublic=1&BhRestToken=' . $bh_rest_token;
    $url = $session->restUrl . $uri;

    // Do the REST request
    $updates_response = bullhorn_rest_api_get_request( $url );

    // If $response is empty then end execution
    if( empty( $updates_response ) ) {
        watchdog( 'bullhorn_job_board', 'Found UPDATED event and REST request returned empty.', array(), WATCHDOG_DEBUG );
        return false;
    }

    // Get the data array
    $updates_data = $updates_response->data;

    // Associate $updates_data with the $updates
    foreach( $updates_data as $update_data ) {
        foreach( $updates as $entity_id => $update ) {
            if( $update_data->id == $entity_id ) {
                $updates[$entity_id]['updated_data'] = $update_data;
            }
        }
    }


    // Loop through the $updates  and update job_order nodes
    foreach( $updates as $update_data ) {
        $nid = array_shift( array_keys( $update_data['node'] ) );
        $node = node_load( $nid );
        $data = $update_data['updated_data'];
        $properties = $update_data['updated_properties'];
        foreach( $properties as $property ) {
            $update_node = bullhorn_job_board_job_order_update( $node, $data, $property );
        }
        try {
            node_save( $update_node );
            watchdog( 'bullhorn_job_board', 'Found UPDATED event and updated node title: %title.', array( '%title' => $update_node->title ), WATCHDOG_INFO );
        } catch( Exception $e ) {
            watchdog( 'bullhorn_job_board', 'Found UPDATED event and failed to save node ( %nid ).', array( '%nid' => $node->nid ), WATCHDOG_EMERGENCY );
        }
    }

    return '';
}

/**
 * Bullhorn Job Board Delete
 * 
 * @param $deleted
 * @param $session
 */

function bullhorn_job_board_delete( $deleted, $session ) {

    $job_order_ids = array();
    foreach( $deleted as $delete ) {
        $job_order_ids[] = $delete->entityId;
    }

    if( empty( $job_order_ids ) ) {
        watchdog( 'bullhorn_job_board', 'Found DELETED event with no entityId(s).', array(), WATCHDOG_DEBUG );
        return false;
    }

    // Get nid(s) for job_order nodes with field_job_order_id(s) in $deleted[$i]->entityId

    $query = new EntityFieldQuery();
    $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'job_order' )
        ->fieldCondition( 'field_job_order_id', 'value', $job_order_ids, 'IN' );
    $result = $query->execute();

    if( empty( $result ) ) {
        watchdog( 'bullhorn_job_board', 'Found DELETED event and failed to find job_order_id(s).', array(), WATCHDOG_DEBUG );
        return false;
    }

    $job_order_nids = array_keys( $result['node'] );

    // Delete the job_order node using the entity_id
    try {
        node_delete_multiple( $job_order_nids );
        watchdog( 'bullhorn_job_board', 'Found DELETED event and deleted node(s): %nodes', array( '%nodes' => implode( ',', $job_order_nids ) ), WATCHDOG_NOTICE );
    } catch( Exception $e ) {
        watchdog( 'bullhorn_job_board', 'Found DELETED event and failed to delete node(s): ( %nids ).', array( '%nids' => implode( ',', $job_order_nids ) ), WATCHDOG_EMERGENCY );
    }
}

/**
 * Bullhorn Job Board Node Insert
 *
 * @param $data
 * @return bool
 */

function bullhorn_job_board_job_order_insert( $data ) {

    // Create a node Object
    $node = new stdClass();
    $node->type = 'job_order';
    node_object_prepare($node);

    // Set the node language
    $node->language = "en";

    // Set the node Title
    $node->title = ucfirst( strtolower( $data->title ) );

    // Attach the JobOrder ID for this node
    $node->field_job_order_id[LANGUAGE_NONE][0]['value'] = $data->id;

    // Attach the payRate
    $node->field_rate[LANGUAGE_NONE][0]['value'] = (float) $data->payRate;

    // Clean the body HTML
    $clean_html = _bullhorn_job_board_clean_body_html( $data->publicDescription );
    // Attach the node Body, Summary and set the format
    $node->body[LANGUAGE_NONE][0]['value'] = $clean_html;
    $node->body[LANGUAGE_NONE][0]['summary'] = text_summary($clean_html);
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';

    // Process and attach the Published date for this node
    $alter_time = $data->dateAdded / 1000;
    $post_date = date("Y-m-d", $alter_time);
    $post_date = $post_date . " 00:00:00";
    $node->field_published[LANGUAGE_NONE][0]['value'] = $post_date;

    // Process and attach the Expires data for this node
    $alter_time = $data->dateEnd / 1000;
    $post_date = date("Y-m-d", $alter_time);
    $post_date = $post_date . " 00:00:00";
    $node->field_expires[LANGUAGE_NONE][0]['value'] = $post_date;

    // Set the Category name
    // TODO query Bullhorn for the category name instead of hardcoding an Array of category_id to category_names
    // because new categories can be introduced
    $cat_name = _bullhorn_job_board_category_id_to_name( $data->categories->data[0]->id );

    // Process the Category name and attach it to the node
    $field_category = _bullhorn_job_board_process_taxonomy_term('categories',$cat_name);
    $node->field_category[LANGUAGE_NONE][0]['tid'] = $field_category;

    // Process and attach the Employment Type to the node
    $employment_type_term = ucwords(strtolower($data->employmentType));
    $field_employment_type = _bullhorn_job_board_process_taxonomy_term('employment_types',$employment_type_term);
    $node->field_employment_type[LANGUAGE_NONE][0] = array( 'tid' => $field_employment_type );

    // Process the Country and City terms for this node. Associate the City with its applicable Country and attach
    // the City to the node. The View's exposed filter is set to a depth of 1 and will display all Cities for the
    // applicable Country when selected
    $country = _bullhorn_job_board_process_country_id( $data->address->countryID );
    $field_job_board_location = array();
    $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $country );
    $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $data->address->city, $country );
    $node->field_job_board_location[LANGUAGE_NONE][0] = array( 'tid' => $field_job_board_location[1] );

    // Process and attach the City to the node
    $field_city = _bullhorn_job_board_process_taxonomy_term( 'cities', ucwords( strtolower( $data->address->city ) ) );
    $node->field_city[LANGUAGE_NONE][0] = array( 'tid' => $field_city );

    // Process and attach the Country to the node
    $field_country = _bullhorn_job_board_process_taxonomy_term( 'countries' , $country );
    $node->field_country[LANGUAGE_NONE][0] = array( 'tid' => $field_country );

    // Attach the Skill List to the node
    // TODO make the Skill List a vocabulary with an unlimited number of values
    $skill_list = ucfirst(strtolower($data->skillList));
    $skill_list = substr($skill_list, 0, 250);
    $node->field_skills[LANGUAGE_NONE][0]['value'] = $skill_list;

    // Set and attach the path to the node
//    $path = 'joborder/programmatically_created_node_' . date('YmdHis');
//    $node->path = array('alias' => $path);
    $node->path['pathauto'] = TRUE;
    $node->uid = 1;

    return $node;
}

/**
 * Bullhorn Job Board Job Order Update
 *
 * @param $node
 * @param $data
 * @param $property
 * @return mixed
 */

function bullhorn_job_board_job_order_update( $node, $data, $property ) {

    switch ( $property ) {
        case 'title':
            $node->title = ucfirst(strtolower($data->title));
            break;

        case 'publicDescription':
            $body = _bullhorn_job_board_clean_body_html( $data->publicDescription );

            $node->body[LANGUAGE_NONE][0]['value'] = $body;
            $node->body[LANGUAGE_NONE][0]['summary'] = text_summary( $body );
            $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
            break;

        case 'id': // It doesn't make sense that this field would be updated
            $node->field_job_order_id[LANGUAGE_NONE][0]['value'] = $data->id;
            break;

        case 'payRate':
            $node->field_rate[LANGUAGE_NONE][0]['value'] = (string) $data->payRate;
            break;

        case 'dateAdded':
            $alter_time = $data->dateAdded / 1000;
            $post_date = date("Y-m-d", $alter_time);
            $post_date = $post_date . " 00:00:00";
            $node->field_published[LANGUAGE_NONE][0]['value'] = $post_date;
            break;

        case 'dateEnd':
            $alter_time = $data->dateEnd / 1000;
            $post_date = date("Y-m-d", $alter_time);
            $post_date = $post_date . " 00:00:00";
            $node->field_expires[LANGUAGE_NONE][0]['value'] = $post_date;
            break;

        case 'address':
            // Process and attach the job_board_location term for this node
            $country = _bullhorn_job_board_process_country_id( $data->address->countryID );
            $field_job_board_location = array();
            $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $country );
            $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $data->address->city, $country );

//            $node->field_job_board_location[LANGUAGE_NONE][0] = array( 'tid' => $field_job_board_location[0] );
            $node->field_job_board_location[LANGUAGE_NONE][0] = array( 'tid' => $field_job_board_location[1] );

            // Process and update the country term for this node
            $field_country = _bullhorn_job_board_process_taxonomy_term( 'countries', $country );
            $node->field_country[LANGUAGE_NONE][0] = array( 'tid' => $field_country );

            // Process and update the city term for this node
            $field_city = _bullhorn_job_board_process_taxonomy_term( 'cities', $data->address->city );
            $node->field_city[LANGUAGE_NONE][0] = array( 'tid' => $field_city );
            break;

        case 'employmentType':
            $field_employment_type = _bullhorn_job_board_process_taxonomy_term( 'field_employment_type', $data->employmentType );
            $node->field_employment_type[LANGUAGE_NONE][0] = array( 'tid' => $field_employment_type );
            break;

        case 'categories':
            $field_category = _bullhorn_job_board_process_taxonomy_term( 'field_category', $data->categories );
            $node->field_category[LANGUAGE_NONE][0] = array( 'tid' => $field_category );
            break;

        case 'skillList':
            $node->field_skills[LANGUAGE_NONE][0]['value'] = $data->skillList;
            break;
    }

    return $node;
}

/**
 * Bullhorn Job Board Cron
 */

function bullhorn_job_board_cron() {

    // Run the Bullhorn Job Board Subscribed Events
    bullhorn_job_board_subscribed_events();

}

/**
 * Bullhorn Job Board Get Jobs
 */
function bullhorn_job_board_get_jobs () {

    // Set the session
    $session = json_encode( array( ) );
    try {
        $authCode = getAuthCode(); //echo $authCode;die;
        $auth = doBullhornAuth($authCode); //echo $auth;die;
        $tokens = json_decode($auth); //print '<pre>';print_r($tokens);die;
        $session = doBullhornLogin($tokens->access_token);

    } catch (Exception $e) {
        error_log($e->getMessage());
    }

    $session_obj = json_decode($session);

    $job_order = bullhorn_job_board_query($session_obj->BhRestToken, $session_obj->restUrl);

    $job_order_obj = json_decode($job_order);

//$cleanse = str_replace(array("\r\n","\n","\r"),'<br />',$job_order);
    $num = count($job_order_obj->data);
//print '<pre>';
//print_r($job_order_obj->data);
//print_r($num);
    $tax_list = taxonomy_get_vocabularies();

    foreach ($tax_list as $item) {
        if ($item->machine_name == 'job_board_location') {
            $job_board_location_vid = $item->vid;
        }
    }

    require_once 'sites/all/libraries/htmlpurifier/library/HTMLPurifier.auto.php';


    for ($i = 0; $i < $num; $i++) {
        $config = HTMLPurifier_Config::createDefault();
        $config->set('HTML.AllowedElements', 'br,ul,ol,li');
        $config->set('Attr.AllowedClasses', '');
        $config->set('HTML.AllowedAttributes', '');
        $config->set('AutoFormat.RemoveEmpty', true);
        $temp = $job_order_obj->data[$i]->publicDescription;
        $remarks = preg_replace('/<\?xml[^>]+\/>/im', '', $temp);
        $purifier = new HTMLPurifier($config);
        $clean_html = $purifier->purify($remarks);
        $clean_html = nl2br($clean_html);

        $node = new stdClass();
        $node->type = 'job_order';
        node_object_prepare($node);
        $node->title = ucfirst(strtolower($job_order_obj->data[$i]->title));

        $node->language = "en";

        // Attach the body and summary to the node and set the body format to full HTML
        $node->body[LANGUAGE_NONE][0]['value'] = $clean_html;
        $node->body[LANGUAGE_NONE][0]['summary'] = text_summary($clean_html);
        $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';

        // Get the category(ies)
        $full_category = $job_order_obj->data[$i]->categories;

        // Set the Category for this job_order
        if ($full_category->total == 1) {
            // This means this job is associated with a category so we can proceed.
            $category_data = $full_category->data;
            // Now that I got the data, pull out the category ID
            $cat_id = $category_data[0]->id;
        }

        // Set the Category name
        $cat_name = _bullhorn_job_board_category_id_to_name($cat_id);

        // Process the Category name and attach it to the node
        $field_category = _bullhorn_job_board_process_taxonomy_term('categories',$cat_name);
        $node->field_category[LANGUAGE_NONE][0]['tid'] = $field_category;

        // Attach the JobOrder ID for this node
        $node->field_job_order_id[LANGUAGE_NONE][0]['value'] = $job_order_obj->data[$i]->id;

        // Process and attach the Published date for this node
        $alter_time = $job_order_obj->data[$i]->dateAdded / 1000;
        $post_date = date("Y-m-d", $alter_time);
        $post_date = $post_date . " 00:00:00";
        $node->field_published[LANGUAGE_NONE][0]['value'] = $post_date;

        // Process and attach the Expires data for this node
        $alter_time = $job_order_obj->data[$i]->dateEnd / 1000;
        $post_date = date("Y-m-d", $alter_time);
        $post_date = $post_date . " 00:00:00";
        $node->field_expires[LANGUAGE_NONE][0]['value'] = $post_date;

        // Process and attach the Employment Type to this node
        $employment_type_term = ucwords(strtolower($job_order_obj->data[$i]->employmentType));
        $field_employment_type = _bullhorn_job_board_process_taxonomy_term('employment_types',$employment_type_term);
        $node->field_employment_type[LANGUAGE_NONE][0] = array( 'tid' => $field_employment_type );

        // Process the Country and City terms for this node. Associate the City with its applicable Country and attach
        // the City to the node. The View's exposed filter is set to a depth of 1 and will display all Cities for the
        // applicable Country when selected
        $country = _bullhorn_job_board_process_country_id( $job_order_obj->data[$i]->address->countryID );
        $field_job_board_location = array();
        $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $country );
        $field_job_board_location[] = _bullhorn_job_board_process_taxonomy_term( 'job_board_location', $job_order_obj->data[$i]->address->city, $country );
//        $node->field_job_board_location[LANGUAGE_NONE][0] = array( 'tid' => $field_job_board_location[0] );
        $node->field_job_board_location[LANGUAGE_NONE][0] = array( 'tid' => $field_job_board_location[1] );


        $field_city = _bullhorn_job_board_process_taxonomy_term( 'cities', ucwords( strtolower( $job_order_obj->data[$i]->address->city ) ) );
        $node->field_city[LANGUAGE_NONE][0] = array( 'tid' => $field_city );

        $field_country = _bullhorn_job_board_process_taxonomy_term( 'countries' , $country );
        $node->field_country[LANGUAGE_NONE][0] = array( 'tid' => $field_country );

        $skill_list = ucfirst(strtolower($job_order_obj->data[$i]->skillList));

        $skill_list = substr($skill_list, 0, 250);

        $node->field_skills[LANGUAGE_NONE][0]['value'] = $skill_list;

//        $path = 'joborder/programmatically_created_node_' . date('YmdHis');
//        $node->path = array('alias' => $path);
        $node->path['pathauto'] = TRUE;
        $node->uid = 1;
        //print '<pre>';
        //print_r($node);
        //exit();

        try {
            node_save($node);
            $success = TRUE;
            watchdog( 'bullhorn_job_board', 'Saved job_order. Title: ( %title ).', array( '%title' => $job_order_obj->data[$i]->title ), WATCHDOG_NOTICE );
        } catch (Exception $e) {
            watchdog( 'bullhorn_job_board', 'Failed to save job_order. Exception: ( %e ), File ( %file ), Function ( %function ).', array( '%e' => $e, '%file' => __FILE__, '%function' => __FUNCTION__), WATCHDOG_EMERGENCY );
        }

        //print_r('Node save was successful.  Nid is '.$node->nid.'<br>');

    }
    // END FOR LOOP
//exit();
    return '';
}

/**
 * Implementation of hook_form_views_exposed_form_alter()
 *
 * Alter the job-board exposed form and set the default country based on the domain name entry point if that country
 * name term exists
 *
 * @param $form
 * @param $form_state
 */

function bullhorn_job_board_form_views_exposed_form_alter( &$form, &$form_state ) {

    // Select the exposed for that we are looking for, the one on the job-board page
    if( strpos( $form['#id'], 'views-exposed-form-job-board-page' ) !== FALSE ) {

        // Get the domain variables
        $domain = domain_get_domain();

        // Set a list of country names and their associated domain names
        $country_domain = array(
            'Canada'         => 'tundratechnical.ca',
            'United States'  => 'tundratechnical.com',
            'India'          => 'tundratechnical.in',
            'United Kingdom' => 'tundratechnical.co.uk'
        );

         // Set the country by which domain is viewed
        $country_name = array();
        foreach( $country_domain as $d ) {
            if( strpos($domain['subdomain'], $d) !== FALSE ) {
                $country_name = array_keys( $country_domain, $d );
            }
        }

        // Get the country tid
        $country_tid = taxonomy_get_term_by_name( $country_name[0], 'job_board_location') ;
        $tid = array_keys( $country_tid );

        // Continue to set the default country if the country name term exists
        if( !empty( $tid[0] ) && is_numeric( $tid[0] ) ) {
            if( empty( $form_state['view']->exposed_input['term_node_tid_depth'] ) ) {

                $form_state['input']['term_node_tid_depth'] = $tid[0];
            }
        }
    }
}

function bullhorn_rest_form_alter($form, $form_state, $form_id)
{
    if ($form_id == "views_exposed_form" && $form_state['view']->name == "job_board" && $form_state['view']->current_display == "page") {

        $form = NULL;

        //print '<pre>';
        //print_r($form);
        //print '</pre>';

        return $form;

    }
    //return $form;

}

function bullhorn_rest_views_query_alter(&$view, &$query)
{


//simple example: change the order of the master display
    //if you want to do it only  on a certain display add something
    // like  "&&$view->current_display == 'panel_page_1'"
    if ($view->name == "job_board") {
        //print '<pre>';
        //print_r($view->query->fields['field_data_field_city_node_entity_type'] );
        //$view->query->fields['field_data_field_category_node_entity_type'] = NULL;
        //
        $arrayName = array(
            'field' => 'field_data_field_job_board_location.field_job_board_location_tid',
            'value' => '574',
            'operator' => '=');
        //array_push($view->query->where[1]['conditions'], $arrayName);
        //print '<pre>';
        //print_r($view->query->where[1]['conditions'] );
        //print '</pre>';
    }

}